{
  "description": "Pipeline for Security events",
  "processors": [
    {
      "set": {
        "field": "event.ingested",
        "value": "{{_ingest.timestamp}}"
      }
    },
    {
      "convert": {
        "field": "event.code",
        "type": "string",
        "ignore_missing": true
      }
    },
    {
      "pipeline": {
        "name": "logs-system.security-1.11.0-standard",
        "if": "ctx?.winlog?.provider_name != null && [\"Microsoft-Windows-Eventlog\", \"Microsoft-Windows-Security-Auditing\"].contains(ctx.winlog.provider_name)"
      }
    },
    {
      "gsub": {
        "field": "source.ip",
        "pattern": "::ffff:",
        "replacement": "",
        "ignore_missing": true
      }
    },
    {
      "append": {
        "field": "related.ip",
        "value": "{{source.ip}}",
        "allow_duplicates": false,
        "if": "ctx?.source?.ip != null &&\nctx.source.ip != \"-\""
      }
    },
    {
      "convert": {
        "field": "winlog.record_id",
        "type": "string",
        "ignore_missing": true
      }
    },
    {
      "convert": {
        "field": "winlog.event_id",
        "type": "string",
        "ignore_missing": true
      }
    },
    {
      "set": {
        "field": "ecs.version",
        "value": "8.0.0"
      }
    },
    {
      "set": {
        "field": "log.level",
        "copy_from": "winlog.level",
        "ignore_empty_value": true,
        "ignore_failure": true,
        "if": "ctx?.winlog?.level != \"\""
      }
    },
    {
      "date": {
        "field": "winlog.time_created",
        "formats": [
          "ISO8601"
        ],
        "ignore_failure": true,
        "if": "ctx?.winlog?.time_created != null"
      }
    },
    {
      "pipeline": {
        "name": "logs-system.security@custom",
        "ignore_missing_pipeline": true
      }
    }
  ],
  "on_failure": [
    {
      "set": {
        "field": "error.message",
        "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
      }
    }
  ],
  "_meta": {
    "managed_by": "fleet",
    "managed": true,
    "package": {
      "name": "system"
    }
  }
}